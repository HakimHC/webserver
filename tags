!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!HTML	C,stylesheet	/stylesheets/
!_TAG_KIND_DESCRIPTION!HTML	I,id	/identifiers/
!_TAG_KIND_DESCRIPTION!HTML	J,script	/scripts/
!_TAG_KIND_DESCRIPTION!HTML	a,anchor	/named anchors/
!_TAG_KIND_DESCRIPTION!HTML	c,class	/classes/
!_TAG_KIND_DESCRIPTION!HTML	h,heading1	/H1 headings/
!_TAG_KIND_DESCRIPTION!HTML	i,heading2	/H2 headings/
!_TAG_KIND_DESCRIPTION!HTML	j,heading3	/H3 headings/
!_TAG_KIND_DESCRIPTION!HTML	t,title	/titles/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!HTML	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/hakim/dev/common_core/webserver/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!HTML!class	attribute	/assigned as attributes/
!_TAG_ROLE_DESCRIPTION!HTML!script	extFile	/referenced as external files/
!_TAG_ROLE_DESCRIPTION!HTML!stylesheet	extFile	/referenced as external files/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
$(NAME)	Makefile	/^$(NAME): $(OBJ)$/;"	t
$(TESTNAME)	Makefile	/^$(TESTNAME): $(TESTSRC)$/;"	t
ADRGONZA WARRIORS, FIGHT !!	www/index.bak.html	/^        <h2><center>ADRGONZA WARRIORS, FIGHT !!<\/center><\/h2>$/;"	i
Adrgonza Warriors Webserver	www/index.html	/^        <h1>Adrgonza Warriors Webserver<\/h1>$/;"	h
Adrgonza Warriors Webserver	www/index.html	/^<title>Adrgonza Warriors Webserver<\/title>$/;"	j
CLIENT	Makefile	/^CLIENT 		= $(addprefix $(CLIENTDIR)\/,$(SRC_CLIENT))$/;"	m
CLIENTDIR	Makefile	/^CLIENTDIR	= $(addprefix $(SRCDIR)\/,client)$/;"	m
CXX	Makefile	/^CXX				= g++$/;"	m
Client	src/client/Client.cpp	/^Client::Client(int fd) : _fd(fd), _response(NULL) {}$/;"	f	class:Client
Client	src/client/Client.hpp	/^class Client {$/;"	c
DEFAULT_ALIAS	include/defaults.hpp	/^#define DEFAULT_ALIAS /;"	d
DEFAULT_CGI	include/defaults.hpp	/^#define DEFAULT_CGI /;"	d
DEFAULT_CONFIG_FILE	include/defaults.hpp	/^#define DEFAULT_CONFIG_FILE /;"	d
DEFAULT_HOST	include/defaults.hpp	/^#define DEFAULT_HOST /;"	d
DEFAULT_INDEX	include/defaults.hpp	/^#define DEFAULT_INDEX /;"	d
DEFAULT_MAX_CLIENT_BODY_SIZE	include/defaults.hpp	/^#define DEFAULT_MAX_CLIENT_BODY_SIZE /;"	d
DEFAULT_PYTHON_ROUTE	include/defaults.hpp	/^#define DEFAULT_PYTHON_ROUTE /;"	d
DEFAULT_ROOT	include/defaults.hpp	/^#define DEFAULT_ROOT /;"	d
DEFAULT_SERVER	include/defaults.hpp	/^#define DEFAULT_SERVER /;"	d
DELETE	src/request/Request.hpp	/^enum requestType { GET, POST, DELETE, UNKNOWN };$/;"	e	enum:requestType
DIRECTORY_REDIRECT	include/redirection.hpp	/^enum redirectionType { DIRECTORY_REDIRECT = 301, NORMAL_REDIRECT = 0 };$/;"	e	enum:redirectionType
Endpoints	www/index.html	/^            <h2>Endpoints<\/h2>$/;"	i
ErrorPage	include/ErrorPage.hpp	/^} ErrorPage;$/;"	t	typeref:struct:__anon85ebed550108
GET	src/request/Request.hpp	/^enum requestType { GET, POST, DELETE, UNKNOWN };$/;"	e	enum:requestType
HTTP	Makefile	/^HTTP 		= $(addprefix $(HTTPDIR)\/,$(SRC_HTTP))$/;"	m
HTTP	src/http/HTTP.cpp	/^HTTP::HTTP() {}$/;"	f	class:HTTP
HTTP	src/http/HTTP.cpp	/^HTTP::HTTP(std::string file) {$/;"	f	class:HTTP
HTTP	src/http/HTTP.hpp	/^class HTTP {$/;"	c
HTTPDIR	Makefile	/^HTTPDIR	= $(addprefix $(SRCDIR)\/,http)$/;"	m
HTTPMethods	src/server/Server.hpp	/^  typedef std::string HTTPMethods;$/;"	t	class:Server	typeref:typename:std::string
HTTP_METHOD	src/request/Request.cpp	/^enum requestLine { HTTP_METHOD, URI, HTTP_VERSION };$/;"	e	enum:requestLine	file:
HTTP_VERSION	src/request/Request.cpp	/^enum requestLine { HTTP_METHOD, URI, HTTP_VERSION };$/;"	e	enum:requestLine	file:
HTTP_VERSION	src/response/Response.hpp	/^#define HTTP_VERSION /;"	d
Hi, this is the first HTML file in the 'adrgonza warriors' webserver project	www/first.html	/^<h1> Hi, this is the first HTML file in the 'adrgonza warriors' webserver project <\/h1>$/;"	h
INC	Makefile	/^INC				= -I $(SERVERDIR)$/;"	m
INC_DIR	Makefile	/^INC_DIR		= include$/;"	m
Listener	src/server/Listener.cpp	/^Listener::Listener(uint16_t port) : _port(port) {$/;"	f	class:Listener
Listener	src/server/Listener.hpp	/^class Listener {$/;"	c
Location	src/server/Location.cpp	/^Location::Location() : _root(DEFAULT_ROOT), _index(DEFAULT_INDEX),$/;"	f	class:Location
Location	src/server/Location.cpp	/^Location::Location(std::string &text, std::string &uri)$/;"	f	class:Location
Location	src/server/Location.hpp	/^class Location {$/;"	c
MAIN	Makefile	/^MAIN 			= $(addprefix $(MAINDIR)\/,$(SRC_MAIN))$/;"	m
MAINDIR	Makefile	/^MAINDIR		= $(addprefix $(SRCDIR)\/,main)$/;"	m
NAME	Makefile	/^NAME 			= webserv$/;"	m
NORMAL_REDIRECT	include/redirection.hpp	/^enum redirectionType { DIRECTORY_REDIRECT = 301, NORMAL_REDIRECT = 0 };$/;"	e	enum:redirectionType
OBJ	Makefile	/^OBJ 			= $(SRC:.cpp=.o)$/;"	m
OS	Makefile	/^OS				= $(shell uname -s)$/;"	m
POST	src/request/Request.hpp	/^enum requestType { GET, POST, DELETE, UNKNOWN };$/;"	e	enum:requestType
REQUEST	Makefile	/^REQUEST 		= $(addprefix $(REQUESTDIR)\/,$(SRC_REQUEST))$/;"	m
REQUESTDIR	Makefile	/^REQUESTDIR	= $(addprefix $(SRCDIR)\/,request)$/;"	m
RESPONSE	Makefile	/^RESPONSE 		= $(addprefix $(RESPONSEDIR)\/,$(SRC_RESPONSE))$/;"	m
RESPONSEDIR	Makefile	/^RESPONSEDIR	= $(addprefix $(SRCDIR)\/,response)$/;"	m
Redirection	include/redirection.hpp	/^} Redirection;$/;"	t	typeref:struct:__anonee006ae60108
Request	src/request/Request.cpp	/^Request::Request() {}$/;"	f	class:Request
Request	src/request/Request.cpp	/^Request::Request(const std::string &requestBuffer) {$/;"	f	class:Request
Request	src/request/Request.hpp	/^class Request {$/;"	c
Response	src/response/Response.cpp	/^Response::Response() {$/;"	f	class:Response
Response	src/response/Response.cpp	/^Response::Response(const std::vector<std::string> &dirContents) {$/;"	f	class:Response
Response	src/response/Response.cpp	/^Response::Response(int sc) : _responseStatusCode(sc) {$/;"	f	class:Response
Response	src/response/Response.hpp	/^class Response {$/;"	c
SERVER	Makefile	/^SERVER 		= $(addprefix $(SERVERDIR)\/,$(SRC_SERVER))$/;"	m
SERVERDIR	Makefile	/^SERVERDIR	= $(addprefix $(SRCDIR)\/,server)$/;"	m
SRC	Makefile	/^SRC				= $(MAIN) 	\\$/;"	m
SRCDIR	Makefile	/^SRCDIR 		= src$/;"	m
SRC_CLIENT	Makefile	/^SRC_CLIENT= Client.cpp$/;"	m
SRC_HTTP	Makefile	/^SRC_HTTP	= HTTP.cpp \\$/;"	m
SRC_MAIN	Makefile	/^SRC_MAIN	= main.cpp$/;"	m
SRC_REQUEST	Makefile	/^SRC_REQUEST	= Request.cpp$/;"	m
SRC_RESPONSE	Makefile	/^SRC_RESPONSE	= Response.cpp$/;"	m
SRC_SERVER	Makefile	/^SRC_SERVER= Server.cpp \\$/;"	m
SRC_UTILS	Makefile	/^SRC_UTILS	= crlf.cpp \\$/;"	m
Server	src/server/Server.cpp	/^Server::Server() {}$/;"	f	class:Server
Server	src/server/Server.cpp	/^Server::Server(std::string &serverString)$/;"	f	class:Server
Server	src/server/Server.hpp	/^class Server {$/;"	c
Simple Form	www/form.html	/^    <h1>Simple Form<\/h1>$/;"	h
Simple Form	www/form.html	/^    <title>Simple Form<\/title>$/;"	j
TESTNAME	Makefile	/^TESTNAME		= testd$/;"	m
TESTSRC	Makefile	/^TESTSRC = $(SRC)$/;"	m
This is who we are, this is what we live for.	www/index.bak.html	/^        <h1><center>This is who we are, this is what we live for.<\/center><\/h1>$/;"	h
UNKNOWN	src/request/Request.hpp	/^enum requestType { GET, POST, DELETE, UNKNOWN };$/;"	e	enum:requestType
URI	src/request/Request.cpp	/^enum requestLine { HTTP_METHOD, URI, HTTP_VERSION };$/;"	e	enum:requestLine	file:
UTILS	Makefile	/^UTILS 		= $(addprefix $(UTILSDIR)\/,$(SRC_UTILS))$/;"	m
UTILSDIR	Makefile	/^UTILSDIR	= $(addprefix $(SRCDIR)\/,utils)$/;"	m
Welcome to the Index location, this is vaca.html	www/index/vaca.html	/^<h1><center>Welcome to the Index location, this is vaca.html<\/center><\/h1>$/;"	h
_BACKLOG	src/server/Server.cpp	/^#define _BACKLOG /;"	d	file:
_MAX_BUFFER_SIZE	src/server/Server.hpp	/^#define _MAX_BUFFER_SIZE /;"	d
_MAX_CLIENTS	src/server/Server.hpp	/^#define _MAX_CLIENTS /;"	d
_NUM_ALLOWED_METHODS	src/server/Server.hpp	/^#define _NUM_ALLOWED_METHODS /;"	d
__CLIENT_HPP__	src/client/Client.hpp	/^#define __CLIENT_HPP__$/;"	d
__DEFAULTS_HPP__	include/defaults.hpp	/^#define __DEFAULTS_HPP__$/;"	d
__ERROR_PAGE_HPP__	include/ErrorPage.hpp	/^# define __ERROR_PAGE_HPP__$/;"	d
__HTTP_HPP__	src/http/HTTP.hpp	/^#define __HTTP_HPP__$/;"	d
__LISTENER_HPP__	src/server/Listener.hpp	/^#define __LISTENER_HPP__$/;"	d
__LOCATION_HPP__	src/server/Location.hpp	/^#define __LOCATION_HPP__$/;"	d
__LOGGING_HPP__	include/logging.hpp	/^#define __LOGGING_HPP__$/;"	d
__REDIRECTION_HPP__	include/redirection.hpp	/^#define __REDIRECTION_HPP__$/;"	d
__REQUEST_HPP__	src/request/Request.hpp	/^#define __REQUEST_HPP__$/;"	d
__RESPONSE_HPP__	src/response/Response.hpp	/^#define __RESPONSE_HPP__$/;"	d
__SERVER_HPP__	src/server/Server.hpp	/^#define __SERVER_HPP__$/;"	d
__UTILS_HPP__	src/utils/utils.hpp	/^#define __UTILS_HPP__$/;"	d
__anon85ebed550108	include/ErrorPage.hpp	/^typedef struct {$/;"	s
__anonee006ae60108	include/redirection.hpp	/^typedef struct {$/;"	s
_alias	src/server/Location.hpp	/^  std::string _alias;$/;"	m	class:Location	typeref:typename:std::string
_allData	src/response/Response.hpp	/^  std::string _allData;$/;"	m	class:Response	typeref:typename:std::string
_allowedMethods	src/server/Location.hpp	/^  std::vector<std::string> _allowedMethods;$/;"	m	class:Location	typeref:typename:std::vector<std::string>
_autoIndex	src/server/Location.hpp	/^  bool _autoIndex;$/;"	m	class:Location	typeref:typename:bool
_body	src/request/Request.hpp	/^  std::string _body;$/;"	m	class:Request	typeref:typename:std::string
_body	src/response/Response.hpp	/^  std::string _body;$/;"	m	class:Response	typeref:typename:std::string
_cgi	src/server/Location.hpp	/^  std::string _cgi;$/;"	m	class:Location	typeref:typename:std::string
_clientMaxBodySize	src/server/Server.hpp	/^  uint16_t _clientMaxBodySize;$/;"	m	class:Server	typeref:typename:uint16_t
_clients	src/server/Listener.hpp	/^  std::vector<Client> _clients;$/;"	m	class:Listener	typeref:typename:std::vector<Client>
_errorPageFiles	src/response/Response.hpp	/^  std::map<int, std::string> _errorPageFiles;$/;"	m	class:Response	typeref:typename:std::map<int,std::string>
_errorPages	src/server/Server.hpp	/^  std::vector<ErrorPage>                _errorPages;$/;"	m	class:Server	typeref:typename:std::vector<ErrorPage>
_extension	src/response/Response.hpp	/^  std::string _extension;$/;"	m	class:Response	typeref:typename:std::string
_fd	src/client/Client.hpp	/^  int _fd;$/;"	m	class:Client	typeref:typename:int
_headers	src/request/Request.hpp	/^  std::map<std::string, std::string> _headers;$/;"	m	class:Request	typeref:typename:std::map<std::string,std::string>
_headers	src/response/Response.hpp	/^  std::map<std::string, std::string> _headers;$/;"	m	class:Response	typeref:typename:std::map<std::string,std::string>
_host	src/server/Server.hpp	/^  std::string _host;$/;"	m	class:Server	typeref:typename:std::string
_httpVersion	src/request/Request.hpp	/^  std::string _httpVersion;$/;"	m	class:Request	typeref:typename:std::string
_index	src/server/Location.hpp	/^  std::string _index;$/;"	m	class:Location	typeref:typename:std::string
_listen	src/server/Listener.cpp	/^void Listener::_listen() {$/;"	f	class:Listener	typeref:typename:void
_listen	src/server/Server.hpp	/^  uint16_t _listen;$/;"	m	class:Server	typeref:typename:uint16_t
_listeners	src/http/HTTP.hpp	/^  std::vector<Listener *> _listeners;$/;"	m	class:HTTP	typeref:typename:std::vector<Listener * >
_location	src/request/Request.hpp	/^  std::string _location;$/;"	m	class:Request	typeref:typename:std::string
_locations	src/server/Server.hpp	/^  std::map<std::string, Location> _locations;     \/\/ key = _uri$/;"	m	class:Server	typeref:typename:std::map<std::string,Location>
_maxClientBodySize	src/server/Location.hpp	/^  size_t _maxClientBodySize;$/;"	m	class:Location	typeref:typename:size_t
_method	src/request/Request.hpp	/^  std::string _method;$/;"	m	class:Request	typeref:typename:std::string
_mimeTypesMap	src/response/Response.hpp	/^  std::map<std::string, std::string> _mimeTypesMap;$/;"	m	class:Response	typeref:typename:std::map<std::string,std::string>
_pollFds	src/server/Listener.hpp	/^  std::vector<struct pollfd> _pollFds;$/;"	m	class:Listener	typeref:typename:std::vector<struct pollfd>
_port	src/server/Listener.hpp	/^  uint16_t _port;$/;"	m	class:Listener	typeref:typename:uint16_t
_queryString	src/request/Request.hpp	/^  std::string _queryString;$/;"	m	class:Request	typeref:typename:std::string
_redirect	src/server/Location.hpp	/^  Redirection _redirect;$/;"	m	class:Location	typeref:typename:Redirection
_requestBuffer	src/client/Client.hpp	/^  std::string _requestBuffer;$/;"	m	class:Client	typeref:typename:std::string
_resource	src/request/Request.hpp	/^  std::string _resource;$/;"	m	class:Request	typeref:typename:std::string
_response	src/client/Client.hpp	/^  Response* _response;$/;"	m	class:Client	typeref:typename:Response *
_responseStatusCode	src/response/Response.hpp	/^  int _responseStatusCode;$/;"	m	class:Response	typeref:typename:int
_return	src/server/Location.hpp	/^  std::string _return;$/;"	m	class:Location	typeref:typename:std::string
_root	src/server/Location.hpp	/^  std::string _root;$/;"	m	class:Location	typeref:typename:std::string
_saveFile	src/server/Location.hpp	/^  std::string _saveFile;$/;"	m	class:Location	typeref:typename:std::string
_serverName	src/server/Server.hpp	/^  std::string _serverName;$/;"	m	class:Server	typeref:typename:std::string
_servers	src/server/Listener.hpp	/^  std::vector<Server> _servers;$/;"	m	class:Listener	typeref:typename:std::vector<Server>
_setPriv	src/server/Location.cpp	/^void Location::_setPriv(std::string line) {$/;"	f	class:Location	typeref:typename:void
_socketFd	src/server/Listener.hpp	/^  int _socketFd;$/;"	m	class:Listener	typeref:typename:int
_statusCodesMap	src/response/Response.hpp	/^  std::map<int, std::string> _statusCodesMap;$/;"	m	class:Response	typeref:typename:std::map<int,std::string>
_uri	src/request/Request.hpp	/^  std::string _uri;$/;"	m	class:Request	typeref:typename:std::string
_uri	src/server/Location.hpp	/^  std::string _uri;$/;"	m	class:Location	typeref:typename:std::string
acceptClient	src/server/Listener.cpp	/^void Listener::acceptClient() {$/;"	f	class:Listener	typeref:typename:void
addHeader	src/response/Response.cpp	/^void Response::addHeader(const std::string &key, const std::string &value) {$/;"	f	class:Response	typeref:typename:void
addServer	src/http/HTTP.cpp	/^void HTTP::addServer(Server server) {$/;"	f	class:HTTP	typeref:typename:void
addServer	src/server/Listener.cpp	/^void Listener::addServer(Server &s) { this->_servers.push_back(s);$/;"	f	class:Listener	typeref:typename:void
adrgonza warriors	www/index.bak.html	/^        <title>adrgonza warriors<\/title>$/;"	j
all	Makefile	/^all: $(NAME)$/;"	t
asan	Makefile	/^asan: CXXFLAGS += -fsanitize=address$/;"	t
asan	Makefile	/^asan: LDFLAGS += -fsanitize=address$/;"	t
asan	Makefile	/^asan: re/;"	t
badge incoming	www/badge.html	/^<h1> badge incoming <\/h1>$/;"	h
basic	www/basic.json	/^{"basic": "testing"}$/;"	s
checkValid	src/server/Listener.cpp	/^bool Listener::checkValid() {$/;"	f	class:Listener	typeref:typename:bool
checkValid	src/server/Location.cpp	/^bool Location::checkValid(){$/;"	f	class:Location	typeref:typename:bool
checkValid	src/server/Server.cpp	/^bool Server::checkValid() const{$/;"	f	class:Server	typeref:typename:bool
clean	Makefile	/^clean:$/;"	t
closeConnection	src/server/Listener.cpp	/^void Listener::closeConnection(Client &client) {$/;"	f	class:Listener	typeref:typename:void
concatWithRootOrAlias	src/server/Server.cpp	/^std::string Server::concatWithRootOrAlias(const Request &req) {$/;"	f	class:Server	typeref:typename:std::string
convertRequestType	src/request/Request.cpp	/^requestType Request::convertRequestType(std::string const &method) {$/;"	f	class:Request	typeref:typename:requestType
errUsage	src/main/main.cpp	/^int errUsage() {$/;"	f	typeref:typename:int
executepythonCGI	src/server/Server.cpp	/^std::string	Server::executepythonCGI(std::string script, std::string queryString)$/;"	f	class:Server	typeref:typename:std::string
fclean	Makefile	/^fclean: clean$/;"	t
field1	www/form.html	/^        <input type="text" id="field1" name="field1" required><br><br>$/;"	I
field2	www/form.html	/^        <input type="text" id="field2" name="field2" required><br><br>$/;"	I
first file auto index	www/autoindex/1.html	/^<h1> first file auto index <\/h1>$/;"	h
funny jaja chistoso	www/test/jaja.html	/^<h1> funny jaja chistoso <\/h1>$/;"	h
generateAutoIndex	src/server/Server.cpp	/^Response *Server::generateAutoIndex(const std::string &s) {$/;"	f	class:Server	typeref:typename:Response *
generateCurrentDateTime	src/response/Response.cpp	/^void Response::generateCurrentDateTime() {$/;"	f	class:Response	typeref:typename:void
generateResponse	src/server/Server.cpp	/^Response *Server::generateResponse(Request &req) {$/;"	f	class:Server	typeref:typename:Response *
generateResponseData	src/response/Response.cpp	/^void Response::generateResponseData() {$/;"	f	class:Response	typeref:typename:void
getAlias	src/server/Location.cpp	/^const std::string &Location::getAlias() const { return this->_alias; }$/;"	f	class:Location	typeref:typename:const std::string &
getAllowedMethods	src/server/Location.cpp	/^const std::vector<std::string> &Location::getAllowedMethods() const {$/;"	f	class:Location	typeref:typename:const std::vector<std::string> &
getAutoIndex	src/server/Location.cpp	/^const bool &Location::getAutoIndex() const { return this->_autoIndex; }$/;"	f	class:Location	typeref:typename:const bool &
getBody	src/request/Request.cpp	/^const std::string &Request::getBody() const { return this->_body; }$/;"	f	class:Request	typeref:typename:const std::string &
getCGI	src/server/Location.cpp	/^const std::string &Location::getCGI() const { return this->_cgi; }$/;"	f	class:Location	typeref:typename:const std::string &
getData	src/response/Response.cpp	/^const std::string &Response::getData() const { return this->_allData; }$/;"	f	class:Response	typeref:typename:const std::string &
getHeaders	src/request/Request.cpp	/^const std::map<std::string, std::string> &Request::getHeaders() const {$/;"	f	class:Request	typeref:typename:const std::map<std::string,std::string> &
getHttpVersion	src/request/Request.cpp	/^const std::string &Request::getHttpVersion() const {$/;"	f	class:Request	typeref:typename:const std::string &
getIndex	src/server/Location.cpp	/^const std::string &Location::getIndex() const { return this->_index; }$/;"	f	class:Location	typeref:typename:const std::string &
getLocation	src/request/Request.cpp	/^const std::string &Request::getLocation() const { return this->_location; }$/;"	f	class:Request	typeref:typename:const std::string &
getMaxClientBodySize	src/server/Location.cpp	/^const size_t &Location::getMaxClientBodySize() const {$/;"	f	class:Location	typeref:typename:const size_t &
getMethod	src/request/Request.cpp	/^const std::string &Request::getMethod() const { return this->_method; }$/;"	f	class:Request	typeref:typename:const std::string &
getQueryString	src/request/Request.cpp	/^const std::string &Request::getQueryString() const {$/;"	f	class:Request	typeref:typename:const std::string &
getRedirect	src/server/Location.cpp	/^const Redirection &Location::getRedirect() const { return this->_redirect; }$/;"	f	class:Location	typeref:typename:const Redirection &
getRequestBodyLegacy	src/request/Request.cpp	/^void Request::getRequestBodyLegacy(const std::string &buffer) {$/;"	f	class:Request	typeref:typename:void
getRequestBuffer	src/client/Client.cpp	/^const std::string &Client::getRequestBuffer() const {$/;"	f	class:Client	typeref:typename:const std::string &
getRequestHeadersLegacy	src/request/Request.cpp	/^std::string Request::getRequestHeadersLegacy(const std::string &buffer) {$/;"	f	class:Request	typeref:typename:std::string
getRequestLineLegacy	src/request/Request.cpp	/^std::string Request::getRequestLineLegacy(std::string const &buffer) {$/;"	f	class:Request	typeref:typename:std::string
getResource	src/request/Request.cpp	/^const std::string &Request::getResource() const { return this->_resource; }$/;"	f	class:Request	typeref:typename:const std::string &
getResponse	src/client/Client.cpp	/^const Response* Client::getResponse() const {$/;"	f	class:Client	typeref:typename:const Response *
getReturn	src/server/Location.cpp	/^const std::string &Location::getReturn() const { return this->_return; }$/;"	f	class:Location	typeref:typename:const std::string &
getRoot	src/server/Location.cpp	/^const std::string &Location::getRoot() const { return this->_root; }$/;"	f	class:Location	typeref:typename:const std::string &
getSaveFile	src/server/Location.cpp	/^const std::string &Location::getSaveFile() const { return this->_saveFile; }$/;"	f	class:Location	typeref:typename:const std::string &
getSocketfd	src/client/Client.cpp	/^const int &Client::getSocketfd() const { return this->_fd; }$/;"	f	class:Client	typeref:typename:const int &
getUri	src/request/Request.cpp	/^const std::string &Request::getUri() const { return this->_uri; }$/;"	f	class:Request	typeref:typename:const std::string &
getUri	src/server/Location.cpp	/^const std::string &Location::getUri() const { return this->_uri; }$/;"	f	class:Location	typeref:typename:const std::string &
handleDeleteRequest	src/server/Server.cpp	/^Response* Server::handleDeleteRequest(Request& req) {$/;"	f	class:Server	typeref:typename:Response *
handleGetRequest	src/server/Server.cpp	/^Response *Server::handleGetRequest(Request &req) {$/;"	f	class:Server	typeref:typename:Response *
handlePostRequest	src/server/Server.cpp	/^Response* Server::handlePostRequest(Request& req) {$/;"	f	class:Server	typeref:typename:Response *
headers	src/request/Request.cpp	/^const std::map<std::string, std::string> &Request::headers() const {$/;"	f	class:Request	typeref:typename:const std::map<std::string,std::string> &
hello from server1	www/server1.html	/^<h1> hello from server1 <\/h1>$/;"	h
hello from server2	www/server2.html	/^<h1> hello from server2 <\/h1>$/;"	h
initHeaders	src/response/Response.cpp	/^void Response::initHeaders() {$/;"	f	class:Response	typeref:typename:void
initMimeTypes	src/response/Response.cpp	/^void Response::initMimeTypes() {$/;"	f	class:Response	typeref:typename:void
initPoll	src/server/Listener.cpp	/^void Listener::initPoll() {$/;"	f	class:Listener	typeref:typename:void
initStatusCodes	src/response/Response.cpp	/^void Response::initStatusCodes() {$/;"	f	class:Response	typeref:typename:void
isCrLf	src/utils/crlf.cpp	/^bool utils::isCrLf(std::string const &s) { return (s == "\\r\\n"); }$/;"	f	class:utils	typeref:typename:bool
isDirectory	src/server/Server.cpp	/^bool Server::isDirectory(std::string const &path) {$/;"	f	class:Server	typeref:typename:bool
isMethodAllowed	src/server/Server.cpp	/^bool Server::isMethodAllowed(const Request &req) {$/;"	f	class:Server	typeref:typename:bool
isPythonCGIReq	src/server/Server.cpp	/^bool Server::	isPythonCGIReq(Request &req ) {$/;"	f	class:Server	typeref:typename:bool
jajajjajaj	www/error.html	/^<h2> jajajjajaj <\/h2>$/;"	i
key	include/ErrorPage.hpp	/^    std::string key;$/;"	m	struct:__anon85ebed550108	typeref:typename:std::string
locationExists	src/server/Server.cpp	/^bool Server::locationExists(const Request &req) const {$/;"	f	class:Server	typeref:typename:bool
log	include/logging.hpp	/^#define log(/;"	d
main	src/main/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	src/main/testmain.cpp	/^int main() {$/;"	f	typeref:typename:int
notSpace	src/server/Location.cpp	/^bool Location::notSpace(char c) { return (!std::isspace(static_cast<unsigned char>(c))); }$/;"	f	class:Location	typeref:typename:bool
parameters	cgi-bin/basic.py	/^parameters = urllib.parse.parse_qs(query_string)$/;"	v
parameters	www/cgi-bin/basic.py	/^parameters = urllib.parse.parse_qs(query_string)$/;"	v
parseLegacy	src/request/Request.cpp	/^void Request::parseLegacy(std::string const &buffer) {$/;"	f	class:Request	typeref:typename:void
parseRedirection	src/server/Location.cpp	/^void Location::parseRedirection() {$/;"	f	class:Location	typeref:typename:void
parseUri	src/request/Request.cpp	/^void Request::parseUri(const std::string &uri) {$/;"	f	class:Request	typeref:typename:void
port	src/server/Listener.cpp	/^const uint16_t &Listener::port() const { return this->_port; }$/;"	f	class:Listener	typeref:typename:const uint16_t &
port	src/server/Server.cpp	/^const uint16_t &Server::port() const { return this->_listen; }$/;"	f	class:Server	typeref:typename:const uint16_t &
print	src/http/HTTP.cpp	/^void HTTP::print() const {$/;"	f	class:HTTP	typeref:typename:void
print	src/request/Request.cpp	/^void Request::print() const {$/;"	f	class:Request	typeref:typename:void
print	src/response/Response.cpp	/^void Response::print() const {$/;"	f	class:Response	typeref:typename:void
print	src/server/Listener.cpp	/^void Listener::print() const {$/;"	f	class:Listener	typeref:typename:void
print	src/server/Location.cpp	/^void Location::print() const {$/;"	f	class:Location	typeref:typename:void
print	src/server/Server.cpp	/^void Server::print() const {$/;"	f	class:Server	typeref:typename:void
printHeaders	src/request/Request.cpp	/^void Request::printHeaders() const {$/;"	f	class:Request	typeref:typename:void
query_string	cgi-bin/basic.py	/^query_string = os.environ.get("QUERY_STRING", "")$/;"	v
query_string	www/cgi-bin/basic.py	/^query_string = os.environ.get("QUERY_STRING", "")$/;"	v
re	Makefile	/^re:: all$/;"	t
re	Makefile	/^re:: fclean$/;"	t
readClientData	src/server/Listener.cpp	/^void Listener::readClientData(const size_t &clientIndex) {$/;"	f	class:Listener	typeref:typename:void
readDirectoryContent	src/server/Server.cpp	/^Server::readDirectoryContent(const std::string &path) const {$/;"	f	class:Server	typeref:typename:std::vector<std::string> *
redirLocation	include/redirection.hpp	/^  std::string redirLocation;$/;"	m	struct:__anonee006ae60108	typeref:typename:std::string
redirectionType	include/redirection.hpp	/^enum redirectionType { DIRECTORY_REDIRECT = 301, NORMAL_REDIRECT = 0 };$/;"	g
removeTrailing	src/server/Location.cpp	/^void Location::removeTrailing(std::string &str) {$/;"	f	class:Location	typeref:typename:void
requestLine	src/request/Request.cpp	/^enum requestLine { HTTP_METHOD, URI, HTTP_VERSION };$/;"	g	file:
requestType	src/request/Request.hpp	/^enum requestType { GET, POST, DELETE, UNKNOWN };$/;"	g
respond	src/server/Listener.cpp	/^void Listener::respond(Client &client) {$/;"	f	class:Listener	typeref:typename:void
returnIndexFile	src/server/Server.cpp	/^Response *Server::returnIndexFile(const std::string &resource) {$/;"	f	class:Server	typeref:typename:Response *
returnPythonCGI	src/server/Server.cpp	/^Response *Server::returnPythonCGI(Request &req) {$/;"	f	class:Server	typeref:typename:Response *
returnRedirection	src/server/Server.cpp	/^Response *Server::returnRedirection(const Request &req, int statusCode) {$/;"	f	class:Server	typeref:typename:Response *
returnResponse	src/server/Server.cpp	/^Response* Server::returnResponse(const int& statusCode) {$/;"	f	class:Server	typeref:typename:Response *
second file auto index	www/autoindex/2.html	/^<h1> second file auto index <\/h1>$/;"	h
sendRequestToServer	src/server/Listener.cpp	/^Response *Listener::sendRequestToServer(Request &req) {$/;"	f	class:Listener	typeref:typename:Response *
separatePyCGI	src/server/Server.cpp	/^  std::vector<std::string> Server::separatePyCGI(std::string all){$/;"	f	class:Server	typeref:typename:std::vector<std::string>
serverName	src/server/Server.cpp	/^const std::string &Server::serverName() const { return this->_serverName; }$/;"	f	class:Server	typeref:typename:const std::string &
setAllowedMethods	src/server/Location.cpp	/^void Location::setAllowedMethods(const std::vector<std::string> &s) {$/;"	f	class:Location	typeref:typename:void
setBody	src/request/Request.cpp	/^void Request::setBody(const std::string &s) { this->_body = s; }$/;"	f	class:Request	typeref:typename:void
setBody	src/response/Response.cpp	/^void Response::setBody(const std::string &s) { this->_body = s; }$/;"	f	class:Response	typeref:typename:void
setErrorPageFile	src/response/Response.cpp	/^void Response::setErrorPageFile(const int &key, const std::string &value) {$/;"	f	class:Response	typeref:typename:void
setExtension	src/response/Response.cpp	/^void Response::setExtension(const std::string &e) { this->_extension = e; }$/;"	f	class:Response	typeref:typename:void
setHeaders	src/request/Request.cpp	/^void Request::setHeaders(const std::map<std::string, std::string> &s) {$/;"	f	class:Request	typeref:typename:void
setHttpVersion	src/request/Request.cpp	/^void Request::setHttpVersion(const std::string &s) { this->_httpVersion = s; }$/;"	f	class:Request	typeref:typename:void
setIndex	src/server/Location.cpp	/^void Location::setIndex(const std::string &s) { this->_index = s; }$/;"	f	class:Location	typeref:typename:void
setLocation	src/request/Request.cpp	/^void Request::setLocation(const std::string &s) { this->_location = s; }$/;"	f	class:Request	typeref:typename:void
setMaxClientBodySize	src/server/Location.cpp	/^void Location::setMaxClientBodySize(const size_t &s) {$/;"	f	class:Location	typeref:typename:void
setMethod	src/request/Request.cpp	/^void Request::setMethod(const std::string &s) { this->_method = s; }$/;"	f	class:Request	typeref:typename:void
setQueryString	src/request/Request.cpp	/^void Request::setQueryString(const std::string &s) { this->_queryString = s; }$/;"	f	class:Request	typeref:typename:void
setRedirect	src/server/Location.cpp	/^void Location::setRedirect(const Redirection &s) { this->_redirect = s; }$/;"	f	class:Location	typeref:typename:void
setRequestBuffer	src/client/Client.cpp	/^void Client::setRequestBuffer(const std::string &s) {$/;"	f	class:Client	typeref:typename:void
setResource	src/request/Request.cpp	/^void Request::setResource(const std::string &s) { this->_resource = s; }$/;"	f	class:Request	typeref:typename:void
setResponse	src/client/Client.cpp	/^void Client::setResponse(Response* r) {$/;"	f	class:Client	typeref:typename:void
setResponseErrorPages	src/server/Server.cpp	/^void Server::setResponseErrorPages(const Request &req) {$/;"	f	class:Server	typeref:typename:void
setResponseStatusCode	src/response/Response.cpp	/^void Response::setResponseStatusCode(const int &statusCode) {$/;"	f	class:Response	typeref:typename:void
setRoot	src/server/Location.cpp	/^void Location::setRoot(const std::string &s) { this->_root = s; }$/;"	f	class:Location	typeref:typename:void
setSocketFd	src/client/Client.cpp	/^void Client::setSocketFd(const int &fd) { this->_fd = fd; }$/;"	f	class:Client	typeref:typename:void
setUri	src/request/Request.cpp	/^void Request::setUri(const std::string &s) { this->_uri = s; }$/;"	f	class:Request	typeref:typename:void
setUri	src/server/Location.cpp	/^void Location::setUri(const std::string &s) { this->_uri = s; }$/;"	f	class:Location	typeref:typename:void
start	src/http/HTTP.cpp	/^void HTTP::start() {$/;"	f	class:HTTP	typeref:typename:void
statusCode	include/redirection.hpp	/^  int statusCode;$/;"	m	struct:__anonee006ae60108	typeref:typename:int
test	Makefile	/^test: $(TESTNAME)$/;"	t
third file auto index	www/autoindex/3.html	/^<h1> third file auto index <\/h1>$/;"	h
this is my error page	www/error.html	/^<h1> this is my error page <\/h1>$/;"	h
this is the index file of a subdirectory of an autoindexed resource	www/autoindex/subdir/index.html	/^<h1> this is the index file of a subdirectory of an autoindexed resource <\/h1>$/;"	h
this is the test index file	www/test/index.html	/^<h1> this is the test index file <\/h1>$/;"	h
utils	src/utils/utils.hpp	/^namespace utils {$/;"	n
value	include/ErrorPage.hpp	/^    std::string value;$/;"	m	struct:__anon85ebed550108	typeref:typename:std::string
~Client	src/client/Client.cpp	/^Client::~Client() {}$/;"	f	class:Client
~HTTP	src/http/HTTP.cpp	/^HTTP::~HTTP() {$/;"	f	class:HTTP
~Listener	src/server/Listener.cpp	/^Listener::~Listener() {}$/;"	f	class:Listener
~Location	src/server/Location.cpp	/^Location::~Location() {}$/;"	f	class:Location
~Request	src/request/Request.cpp	/^Request::~Request() {}$/;"	f	class:Request
~Response	src/response/Response.cpp	/^Response::~Response() {}$/;"	f	class:Response
~Server	src/server/Server.cpp	/^Server::~Server() {}$/;"	f	class:Server
